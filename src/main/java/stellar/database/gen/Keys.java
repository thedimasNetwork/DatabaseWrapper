/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen;


import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import stellar.database.gen.tables.Bans;
import stellar.database.gen.tables.IpCached;
import stellar.database.gen.tables.PlayerEvents;
import stellar.database.gen.tables.Playtime;
import stellar.database.gen.tables.ServerEvents;
import stellar.database.gen.tables.Users;
import stellar.database.gen.tables.records.BansRecord;
import stellar.database.gen.tables.records.IpCachedRecord;
import stellar.database.gen.tables.records.PlayerEventsRecord;
import stellar.database.gen.tables.records.PlaytimeRecord;
import stellar.database.gen.tables.records.ServerEventsRecord;
import stellar.database.gen.tables.records.UsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * mindustry.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BansRecord> keyBansPrimary = Internal.createUniqueKey(Bans.bans, DSL.name("KEY_bans_PRIMARY"), new TableField[] { Bans.bans.id }, true);
    public static final UniqueKey<IpCachedRecord> keyIpCachedPrimary = Internal.createUniqueKey(IpCached.ipCached, DSL.name("KEY_ip_cached_PRIMARY"), new TableField[] { IpCached.ipCached.id }, true);
    public static final UniqueKey<IpCachedRecord> keyIpCachedSecondary = Internal.createUniqueKey(IpCached.ipCached, DSL.name("KEY_ip_cached_SECONDARY"), new TableField[] { IpCached.ipCached.ip }, true);
    public static final UniqueKey<PlayerEventsRecord> keyPlayerEventsPrimary = Internal.createUniqueKey(PlayerEvents.playerEvents, DSL.name("KEY_player_events_PRIMARY"), new TableField[] { PlayerEvents.playerEvents.id }, true);
    public static final UniqueKey<PlaytimeRecord> keyPlaytimePrimary = Internal.createUniqueKey(Playtime.playtime, DSL.name("KEY_playtime_PRIMARY"), new TableField[] { Playtime.playtime.uuid }, true);
    public static final UniqueKey<ServerEventsRecord> keyServerEventsPrimary = Internal.createUniqueKey(ServerEvents.serverEvents, DSL.name("KEY_server_events_PRIMARY"), new TableField[] { ServerEvents.serverEvents.id }, true);
    public static final UniqueKey<UsersRecord> keyUsersPrimary = Internal.createUniqueKey(Users.users, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.users.uuid }, true);
    public static final UniqueKey<UsersRecord> keyUsersSecondary = Internal.createUniqueKey(Users.users, DSL.name("KEY_users_SECONDARY"), new TableField[] { Users.users.id }, true);
}
