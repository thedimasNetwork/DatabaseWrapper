/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.converters.UnitSnapshotConverter;
import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.HexSnapshotsRecord;
import stellar.database.types.UnitSnapshot;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HexSnapshots extends TableImpl<HexSnapshotsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.hex_snapshots</code>
     */
    public static final HexSnapshots hexSnapshots = new HexSnapshots();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HexSnapshotsRecord> getRecordType() {
        return HexSnapshotsRecord.class;
    }

    /**
     * The column <code>mindustry.hex_snapshots.id</code>.
     */
    public final TableField<HexSnapshotsRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mindustry.hex_snapshots.timestamp</code>.
     */
    public final TableField<HexSnapshotsRecord, OffsetDateTime> timestamp = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mindustry.hex_snapshots.match</code>.
     */
    public final TableField<HexSnapshotsRecord, Integer> match = createField(DSL.name("match"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mindustry.hex_snapshots.units</code>.
     */
    public final TableField<HexSnapshotsRecord, List<UnitSnapshot>> units = createField(DSL.name("units"), SQLDataType.JSONB.nullable(false), this, "", new UnitSnapshotConverter());

    private HexSnapshots(Name alias, Table<HexSnapshotsRecord> aliased) {
        this(alias, aliased, null);
    }

    private HexSnapshots(Name alias, Table<HexSnapshotsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.hex_snapshots</code> table reference
     */
    public HexSnapshots(String alias) {
        this(DSL.name(alias), hexSnapshots);
    }

    /**
     * Create an aliased <code>mindustry.hex_snapshots</code> table reference
     */
    public HexSnapshots(Name alias) {
        this(alias, hexSnapshots);
    }

    /**
     * Create a <code>mindustry.hex_snapshots</code> table reference
     */
    public HexSnapshots() {
        this(DSL.name("hex_snapshots"), null);
    }

    public <O extends Record> HexSnapshots(Table<O> child, ForeignKey<O, HexSnapshotsRecord> key) {
        super(child, key, hexSnapshots);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.mindustry;
    }

    @Override
    public Identity<HexSnapshotsRecord, Integer> getIdentity() {
        return (Identity<HexSnapshotsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HexSnapshotsRecord> getPrimaryKey() {
        return Keys.hexSnapshotsPk;
    }

    @Override
    public List<ForeignKey<HexSnapshotsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.hexSnapshots_HexSnapshotsHexMatchesIdFk);
    }

    private transient HexMatches _hexMatches;

    /**
     * Get the implicit join path to the <code>mindustry.hex_matches</code>
     * table.
     */
    public HexMatches hexMatches() {
        if (_hexMatches == null)
            _hexMatches = new HexMatches(this, Keys.hexSnapshots_HexSnapshotsHexMatchesIdFk);

        return _hexMatches;
    }

    @Override
    public HexSnapshots as(String alias) {
        return new HexSnapshots(DSL.name(alias), this);
    }

    @Override
    public HexSnapshots as(Name alias) {
        return new HexSnapshots(alias, this);
    }

    @Override
    public HexSnapshots as(Table<?> alias) {
        return new HexSnapshots(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HexSnapshots rename(String name) {
        return new HexSnapshots(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HexSnapshots rename(Name name) {
        return new HexSnapshots(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HexSnapshots rename(Table<?> name) {
        return new HexSnapshots(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, OffsetDateTime, Integer, List<UnitSnapshot>> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super OffsetDateTime, ? super Integer, ? super List<UnitSnapshot>, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super OffsetDateTime, ? super Integer, ? super List<UnitSnapshot>, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
