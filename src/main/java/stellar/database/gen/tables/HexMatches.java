/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.HexMatchesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HexMatches extends TableImpl<HexMatchesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.hex_matches</code>
     */
    public static final HexMatches hexMatches = new HexMatches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HexMatchesRecord> getRecordType() {
        return HexMatchesRecord.class;
    }

    /**
     * The column <code>mindustry.hex_matches.id</code>.
     */
    public final TableField<HexMatchesRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mindustry.hex_matches.started</code>.
     */
    public final TableField<HexMatchesRecord, OffsetDateTime> started = createField(DSL.name("started"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mindustry.hex_matches.finished</code>.
     */
    public final TableField<HexMatchesRecord, OffsetDateTime> finished = createField(DSL.name("finished"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>mindustry.hex_matches.planet</code>.
     */
    public final TableField<HexMatchesRecord, String> planet = createField(DSL.name("planet"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>mindustry.hex_matches.map</code>.
     */
    public final TableField<HexMatchesRecord, String> map = createField(DSL.name("map"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private HexMatches(Name alias, Table<HexMatchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private HexMatches(Name alias, Table<HexMatchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.hex_matches</code> table reference
     */
    public HexMatches(String alias) {
        this(DSL.name(alias), hexMatches);
    }

    /**
     * Create an aliased <code>mindustry.hex_matches</code> table reference
     */
    public HexMatches(Name alias) {
        this(alias, hexMatches);
    }

    /**
     * Create a <code>mindustry.hex_matches</code> table reference
     */
    public HexMatches() {
        this(DSL.name("hex_matches"), null);
    }

    public <O extends Record> HexMatches(Table<O> child, ForeignKey<O, HexMatchesRecord> key) {
        super(child, key, hexMatches);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.mindustry;
    }

    @Override
    public Identity<HexMatchesRecord, Integer> getIdentity() {
        return (Identity<HexMatchesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HexMatchesRecord> getPrimaryKey() {
        return Keys.hexMatchesPk;
    }

    @Override
    public HexMatches as(String alias) {
        return new HexMatches(DSL.name(alias), this);
    }

    @Override
    public HexMatches as(Name alias) {
        return new HexMatches(alias, this);
    }

    @Override
    public HexMatches as(Table<?> alias) {
        return new HexMatches(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HexMatches rename(String name) {
        return new HexMatches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HexMatches rename(Name name) {
        return new HexMatches(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HexMatches rename(Table<?> name) {
        return new HexMatches(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, OffsetDateTime, OffsetDateTime, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
