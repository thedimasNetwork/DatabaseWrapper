/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables.records;


import java.time.OffsetDateTime;
import java.util.List;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import stellar.database.gen.tables.HexSnapshots;
import stellar.database.types.UnitSnapshot;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HexSnapshotsRecord extends UpdatableRecordImpl<HexSnapshotsRecord> implements Record4<Integer, OffsetDateTime, Integer, List<UnitSnapshot>> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mindustry.hex_snapshots.id</code>.
     */
    public HexSnapshotsRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mindustry.hex_snapshots.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>mindustry.hex_snapshots.timestamp</code>.
     */
    public HexSnapshotsRecord setTimestamp(OffsetDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mindustry.hex_snapshots.timestamp</code>.
     */
    public OffsetDateTime getTimestamp() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>mindustry.hex_snapshots.match</code>.
     */
    public HexSnapshotsRecord setMatch(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mindustry.hex_snapshots.match</code>.
     */
    public Integer getMatch() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>mindustry.hex_snapshots.units</code>.
     */
    public HexSnapshotsRecord setUnits(List<UnitSnapshot> value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mindustry.hex_snapshots.units</code>.
     */
    public List<UnitSnapshot> getUnits() {
        return (List<UnitSnapshot>) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, OffsetDateTime, Integer, List<UnitSnapshot>> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, OffsetDateTime, Integer, List<UnitSnapshot>> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return HexSnapshots.hexSnapshots.id;
    }

    @Override
    public Field<OffsetDateTime> field2() {
        return HexSnapshots.hexSnapshots.timestamp;
    }

    @Override
    public Field<Integer> field3() {
        return HexSnapshots.hexSnapshots.match;
    }

    @Override
    public Field<List<UnitSnapshot>> field4() {
        return HexSnapshots.hexSnapshots.units;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public OffsetDateTime component2() {
        return getTimestamp();
    }

    @Override
    public Integer component3() {
        return getMatch();
    }

    @Override
    public List<UnitSnapshot> component4() {
        return getUnits();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public OffsetDateTime value2() {
        return getTimestamp();
    }

    @Override
    public Integer value3() {
        return getMatch();
    }

    @Override
    public List<UnitSnapshot> value4() {
        return getUnits();
    }

    @Override
    public HexSnapshotsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public HexSnapshotsRecord value2(OffsetDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public HexSnapshotsRecord value3(Integer value) {
        setMatch(value);
        return this;
    }

    @Override
    public HexSnapshotsRecord value4(List<UnitSnapshot> value) {
        setUnits(value);
        return this;
    }

    @Override
    public HexSnapshotsRecord values(Integer value1, OffsetDateTime value2, Integer value3, List<UnitSnapshot> value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HexSnapshotsRecord
     */
    public HexSnapshotsRecord() {
        super(HexSnapshots.hexSnapshots);
    }

    /**
     * Create a detached, initialised HexSnapshotsRecord
     */
    public HexSnapshotsRecord(Integer id, OffsetDateTime timestamp, Integer match, List<UnitSnapshot> units) {
        super(HexSnapshots.hexSnapshots);

        setId(id);
        setTimestamp(timestamp);
        setMatch(match);
        setUnits(units);
    }
}
