/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.ResultsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Results extends TableImpl<ResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.results</code>
     */
    public static final Results results = new Results();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResultsRecord> getRecordType() {
        return ResultsRecord.class;
    }

    /**
     * The column <code>mindustry.results.id</code>.
     */
    public final TableField<ResultsRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mindustry.results.match</code>.
     */
    public final TableField<ResultsRecord, Integer> match = createField(DSL.name("match"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mindustry.results.players</code>.
     */
    public final TableField<ResultsRecord, String[]> players = createField(DSL.name("players"), SQLDataType.VARCHAR(40).getArrayDataType(), this, "");

    /**
     * The column <code>mindustry.results.delta_elo</code>.
     */
    public final TableField<ResultsRecord, Integer> deltaElo = createField(DSL.name("delta_elo"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mindustry.results.started</code>.
     */
    public final TableField<ResultsRecord, OffsetDateTime> started = createField(DSL.name("started"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>mindustry.results.finished</code>.
     */
    public final TableField<ResultsRecord, OffsetDateTime> finished = createField(DSL.name("finished"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>mindustry.results.reason</code>.
     */
    public final TableField<ResultsRecord, String> reason = createField(DSL.name("reason"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    private Results(Name alias, Table<ResultsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Results(Name alias, Table<ResultsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.results</code> table reference
     */
    public Results(String alias) {
        this(DSL.name(alias), results);
    }

    /**
     * Create an aliased <code>mindustry.results</code> table reference
     */
    public Results(Name alias) {
        this(alias, results);
    }

    /**
     * Create a <code>mindustry.results</code> table reference
     */
    public Results() {
        this(DSL.name("results"), null);
    }

    public <O extends Record> Results(Table<O> child, ForeignKey<O, ResultsRecord> key) {
        super(child, key, results);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.mindustry;
    }

    @Override
    public Identity<ResultsRecord, Integer> getIdentity() {
        return (Identity<ResultsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ResultsRecord> getPrimaryKey() {
        return Keys.resultsPk;
    }

    @Override
    public List<ForeignKey<ResultsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.results_ResultsMatchesIdFk);
    }

    private transient Matches _matches;

    /**
     * Get the implicit join path to the <code>mindustry.matches</code> table.
     */
    public Matches matches() {
        if (_matches == null)
            _matches = new Matches(this, Keys.results_ResultsMatchesIdFk);

        return _matches;
    }

    @Override
    public Results as(String alias) {
        return new Results(DSL.name(alias), this);
    }

    @Override
    public Results as(Name alias) {
        return new Results(alias, this);
    }

    @Override
    public Results as(Table<?> alias) {
        return new Results(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(String name) {
        return new Results(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(Name name) {
        return new Results(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(Table<?> name) {
        return new Results(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String[], Integer, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super Integer, ? super String[], ? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super Integer, ? super String[], ? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
