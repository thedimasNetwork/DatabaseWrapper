/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.RankedStatsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RankedStats extends TableImpl<RankedStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.ranked_stats</code>
     */
    public static final RankedStats rankedStats = new RankedStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RankedStatsRecord> getRecordType() {
        return RankedStatsRecord.class;
    }

    /**
     * The column <code>mindustry.ranked_stats.uuid</code>.
     */
    public final TableField<RankedStatsRecord, String> uuid = createField(DSL.name("uuid"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mindustry.ranked_stats.created_at</code>.
     */
    public final TableField<RankedStatsRecord, OffsetDateTime> createdAt = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mindustry.ranked_stats.matches</code>.
     */
    public final TableField<RankedStatsRecord, Integer> matches = createField(DSL.name("matches"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mindustry.ranked_stats.wins</code>.
     */
    public final TableField<RankedStatsRecord, Integer> wins = createField(DSL.name("wins"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mindustry.ranked_stats.losses</code>.
     */
    public final TableField<RankedStatsRecord, Integer> losses = createField(DSL.name("losses"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mindustry.ranked_stats.draws</code>.
     */
    public final TableField<RankedStatsRecord, Integer> draws = createField(DSL.name("draws"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mindustry.ranked_stats.lowest_elo</code>.
     */
    public final TableField<RankedStatsRecord, Integer> lowestElo = createField(DSL.name("lowest_elo"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1000", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mindustry.ranked_stats.highest_elo</code>.
     */
    public final TableField<RankedStatsRecord, Integer> highestElo = createField(DSL.name("highest_elo"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1000", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mindustry.ranked_stats.current_elo</code>.
     */
    public final TableField<RankedStatsRecord, Integer> currentElo = createField(DSL.name("current_elo"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1000", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mindustry.ranked_stats.start_elo</code>.
     */
    public final TableField<RankedStatsRecord, Integer> startElo = createField(DSL.name("start_elo"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private RankedStats(Name alias, Table<RankedStatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RankedStats(Name alias, Table<RankedStatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.ranked_stats</code> table reference
     */
    public RankedStats(String alias) {
        this(DSL.name(alias), rankedStats);
    }

    /**
     * Create an aliased <code>mindustry.ranked_stats</code> table reference
     */
    public RankedStats(Name alias) {
        this(alias, rankedStats);
    }

    /**
     * Create a <code>mindustry.ranked_stats</code> table reference
     */
    public RankedStats() {
        this(DSL.name("ranked_stats"), null);
    }

    public <O extends Record> RankedStats(Table<O> child, ForeignKey<O, RankedStatsRecord> key) {
        super(child, key, rankedStats);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.mindustry;
    }

    @Override
    public UniqueKey<RankedStatsRecord> getPrimaryKey() {
        return Keys.rankedStatsPk;
    }

    @Override
    public List<ForeignKey<RankedStatsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.rankedStats_RankedStatsUsersUuidFk);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>mindustry.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.rankedStats_RankedStatsUsersUuidFk);

        return _users;
    }

    @Override
    public RankedStats as(String alias) {
        return new RankedStats(DSL.name(alias), this);
    }

    @Override
    public RankedStats as(Name alias) {
        return new RankedStats(alias, this);
    }

    @Override
    public RankedStats as(Table<?> alias) {
        return new RankedStats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RankedStats rename(String name) {
        return new RankedStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RankedStats rename(Name name) {
        return new RankedStats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RankedStats rename(Table<?> name) {
        return new RankedStats(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, OffsetDateTime, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super OffsetDateTime, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super OffsetDateTime, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
