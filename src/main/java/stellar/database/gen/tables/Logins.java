/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.LoginsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Logins extends TableImpl<LoginsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.logins</code>
     */
    public static final Logins logins = new Logins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoginsRecord> getRecordType() {
        return LoginsRecord.class;
    }

    /**
     * The column <code>mindustry.logins.id</code>.
     */
    public final TableField<LoginsRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mindustry.logins.timestamp</code>.
     */
    public final TableField<LoginsRecord, OffsetDateTime> timestamp = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mindustry.logins.server</code>.
     */
    public final TableField<LoginsRecord, String> server = createField(DSL.name("server"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>mindustry.logins.uuid</code>.
     */
    public final TableField<LoginsRecord, String> uuid = createField(DSL.name("uuid"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mindustry.logins.ip</code>.
     */
    public final TableField<LoginsRecord, String> ip = createField(DSL.name("ip"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>mindustry.logins.name</code>.
     */
    public final TableField<LoginsRecord, String> name = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>mindustry.logins.locale</code>.
     */
    public final TableField<LoginsRecord, String> locale = createField(DSL.name("locale"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    private Logins(Name alias, Table<LoginsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Logins(Name alias, Table<LoginsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.logins</code> table reference
     */
    public Logins(String alias) {
        this(DSL.name(alias), logins);
    }

    /**
     * Create an aliased <code>mindustry.logins</code> table reference
     */
    public Logins(Name alias) {
        this(alias, logins);
    }

    /**
     * Create a <code>mindustry.logins</code> table reference
     */
    public Logins() {
        this(DSL.name("logins"), null);
    }

    public <O extends Record> Logins(Table<O> child, ForeignKey<O, LoginsRecord> key) {
        super(child, key, logins);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.mindustry;
    }

    @Override
    public Identity<LoginsRecord, Integer> getIdentity() {
        return (Identity<LoginsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LoginsRecord> getPrimaryKey() {
        return Keys.idx_18446Primary;
    }

    @Override
    public Logins as(String alias) {
        return new Logins(DSL.name(alias), this);
    }

    @Override
    public Logins as(Name alias) {
        return new Logins(alias, this);
    }

    @Override
    public Logins as(Table<?> alias) {
        return new Logins(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Logins rename(String name) {
        return new Logins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Logins rename(Name name) {
        return new Logins(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Logins rename(Table<?> name) {
        return new Logins(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, OffsetDateTime, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
