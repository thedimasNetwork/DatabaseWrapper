/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.EloHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EloHistory extends TableImpl<EloHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.elo_history</code>
     */
    public static final EloHistory eloHistory = new EloHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EloHistoryRecord> getRecordType() {
        return EloHistoryRecord.class;
    }

    /**
     * The column <code>mindustry.elo_history.id</code>.
     */
    public final TableField<EloHistoryRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mindustry.elo_history.timestamp</code>.
     */
    public final TableField<EloHistoryRecord, OffsetDateTime> timestamp = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>mindustry.elo_history.player</code>.
     */
    public final TableField<EloHistoryRecord, String> player = createField(DSL.name("player"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mindustry.elo_history.elo</code>.
     */
    public final TableField<EloHistoryRecord, Integer> elo = createField(DSL.name("elo"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mindustry.elo_history.delta</code>.
     */
    public final TableField<EloHistoryRecord, Integer> delta = createField(DSL.name("delta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mindustry.elo_history.match</code>.
     */
    public final TableField<EloHistoryRecord, Integer> match = createField(DSL.name("match"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mindustry.elo_history.result</code>.
     */
    public final TableField<EloHistoryRecord, Float> result = createField(DSL.name("result"), SQLDataType.REAL, this, "");

    private EloHistory(Name alias, Table<EloHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private EloHistory(Name alias, Table<EloHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.elo_history</code> table reference
     */
    public EloHistory(String alias) {
        this(DSL.name(alias), eloHistory);
    }

    /**
     * Create an aliased <code>mindustry.elo_history</code> table reference
     */
    public EloHistory(Name alias) {
        this(alias, eloHistory);
    }

    /**
     * Create a <code>mindustry.elo_history</code> table reference
     */
    public EloHistory() {
        this(DSL.name("elo_history"), null);
    }

    public <O extends Record> EloHistory(Table<O> child, ForeignKey<O, EloHistoryRecord> key) {
        super(child, key, eloHistory);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.mindustry;
    }

    @Override
    public Identity<EloHistoryRecord, Integer> getIdentity() {
        return (Identity<EloHistoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EloHistoryRecord> getPrimaryKey() {
        return Keys.eloHistoryPk;
    }

    @Override
    public List<ForeignKey<EloHistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.eloHistory_EloHistoryUsersUuidFk, Keys.eloHistory_EloHistoryMatchesIdFk);
    }

    private transient Users _users;
    private transient Matches _matches;

    /**
     * Get the implicit join path to the <code>mindustry.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.eloHistory_EloHistoryUsersUuidFk);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>mindustry.matches</code> table.
     */
    public Matches matches() {
        if (_matches == null)
            _matches = new Matches(this, Keys.eloHistory_EloHistoryMatchesIdFk);

        return _matches;
    }

    @Override
    public EloHistory as(String alias) {
        return new EloHistory(DSL.name(alias), this);
    }

    @Override
    public EloHistory as(Name alias) {
        return new EloHistory(alias, this);
    }

    @Override
    public EloHistory as(Table<?> alias) {
        return new EloHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EloHistory rename(String name) {
        return new EloHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EloHistory rename(Name name) {
        return new EloHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EloHistory rename(Table<?> name) {
        return new EloHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, OffsetDateTime, String, Integer, Integer, Integer, Float> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super OffsetDateTime, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Float, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super OffsetDateTime, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Float, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
