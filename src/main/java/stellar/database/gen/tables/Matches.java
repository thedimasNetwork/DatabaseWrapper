/*
 * This file is generated by jOOQ.
 */
package stellar.database.gen.tables;


import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stellar.database.enums.PvpMode;
import stellar.database.gen.Keys;
import stellar.database.gen.Mindustry;
import stellar.database.gen.tables.records.MatchesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Matches extends TableImpl<MatchesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mindustry.matches</code>
     */
    public static final Matches matches = new Matches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchesRecord> getRecordType() {
        return MatchesRecord.class;
    }

    /**
     * The column <code>mindustry.matches.id</code>.
     */
    public final TableField<MatchesRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mindustry.matches.started</code>.
     */
    public final TableField<MatchesRecord, OffsetDateTime> started = createField(DSL.name("started"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mindustry.matches.finished</code>.
     */
    public final TableField<MatchesRecord, OffsetDateTime> finished = createField(DSL.name("finished"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>mindustry.matches.mode</code>.
     */
    public final TableField<MatchesRecord, PvpMode> mode = createField(DSL.name("mode"), SQLDataType.VARCHAR(16).nullable(false), this, "", new EnumConverter<String, PvpMode>(String.class, PvpMode.class));

    /**
     * The column <code>mindustry.matches.map</code>.
     */
    public final TableField<MatchesRecord, String> map = createField(DSL.name("map"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>mindustry.matches.team_a</code>.
     */
    public final TableField<MatchesRecord, String[]> teamA = createField(DSL.name("team_a"), SQLDataType.VARCHAR(40).getArrayDataType(), this, "");

    /**
     * The column <code>mindustry.matches.team_b</code>.
     */
    public final TableField<MatchesRecord, String[]> teamB = createField(DSL.name("team_b"), SQLDataType.VARCHAR(40).getArrayDataType(), this, "");

    /**
     * The column <code>mindustry.matches.team_c</code>.
     */
    public final TableField<MatchesRecord, String[]> teamC = createField(DSL.name("team_c"), SQLDataType.VARCHAR(40).getArrayDataType(), this, "");

    /**
     * The column <code>mindustry.matches.team_d</code>.
     */
    public final TableField<MatchesRecord, String[]> teamD = createField(DSL.name("team_d"), SQLDataType.VARCHAR(40).getArrayDataType(), this, "");

    /**
     * The column <code>mindustry.matches.delta_elo</code>.
     */
    public final TableField<MatchesRecord, Integer[]> deltaElo = createField(DSL.name("delta_elo"), SQLDataType.INTEGER.getArrayDataType(), this, "");

    private Matches(Name alias, Table<MatchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Matches(Name alias, Table<MatchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mindustry.matches</code> table reference
     */
    public Matches(String alias) {
        this(DSL.name(alias), matches);
    }

    /**
     * Create an aliased <code>mindustry.matches</code> table reference
     */
    public Matches(Name alias) {
        this(alias, matches);
    }

    /**
     * Create a <code>mindustry.matches</code> table reference
     */
    public Matches() {
        this(DSL.name("matches"), null);
    }

    public <O extends Record> Matches(Table<O> child, ForeignKey<O, MatchesRecord> key) {
        super(child, key, matches);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mindustry.mindustry;
    }

    @Override
    public Identity<MatchesRecord, Integer> getIdentity() {
        return (Identity<MatchesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MatchesRecord> getPrimaryKey() {
        return Keys.matchesPk;
    }

    @Override
    public Matches as(String alias) {
        return new Matches(DSL.name(alias), this);
    }

    @Override
    public Matches as(Name alias) {
        return new Matches(alias, this);
    }

    @Override
    public Matches as(Table<?> alias) {
        return new Matches(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(String name) {
        return new Matches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(Name name) {
        return new Matches(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(Table<?> name) {
        return new Matches(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, OffsetDateTime, OffsetDateTime, PvpMode, String, String[], String[], String[], String[], Integer[]> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? super PvpMode, ? super String, ? super String[], ? super String[], ? super String[], ? super String[], ? super Integer[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? super PvpMode, ? super String, ? super String[], ? super String[], ? super String[], ? super String[], ? super Integer[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
